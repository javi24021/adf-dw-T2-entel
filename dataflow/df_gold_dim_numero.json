{
	"name": "df_gold_dim_numero",
	"properties": {
		"folder": {
			"name": "GOLD"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ls_sql_silver_datos",
						"type": "DatasetReference"
					},
					"name": "numeroDatos"
				},
				{
					"dataset": {
						"referenceName": "ls_sql_silver_llamadas",
						"type": "DatasetReference"
					},
					"name": "numeroA"
				},
				{
					"dataset": {
						"referenceName": "ls_sql_silver_llamadas",
						"type": "DatasetReference"
					},
					"name": "numeroB"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_gold_dim_numero",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "union2"
				},
				{
					"name": "sort1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          numero as string,",
				"          imei as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT DISTINCT numero, imei FROM silver.datos',",
				"     format: 'query') ~> numeroDatos",
				"source(output(",
				"          numero as string,",
				"          imei as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT DISTINCT numero_a as numero, imei_a as imei FROM silver.llamadas',",
				"     format: 'query') ~> numeroA",
				"source(output(",
				"          numero as string,",
				"          imei as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT DISTINCT numero_b as numero, imei_b as imei FROM silver.llamadas',",
				"     format: 'query') ~> numeroB",
				"numeroDatos, numeroA union(byName: true)~> union1",
				"union1, numeroB union(byName: true)~> union2",
				"union2 sort(asc(numero, true)) ~> sort1",
				"sort1 aggregate(groupBy(numero),",
				"     each(match(name != 'numero'), $$ = first($$))) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id_numero as integer,",
				"          numero as string,",
				"          imei as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          numero,",
				"          imei",
				"     )) ~> sink1"
			]
		}
	}
}